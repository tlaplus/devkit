======= Variables, States, and Actions =======

Currently, our implementation is not significantly different from any other ordinary programming language.
However, TLA⁺ is not an ordinary language - it isn't even a programming language!
TLA⁺ specifications are not programs.
Properly speaking, a TLA⁺ specification is a predicate over an infinite sequence of states, where states are an assignment of values to variables.
TLA⁺ specs' closest analogue to program execution is enumerating the set of all unique reachable states, over which state traces occur.
The focus of this chapter is thus to introduce states and how to transition between them using actions.

Every model-checkable TLA⁺ specification contains variables.
These variables are different from the identifiers associated with operators in past chapters.
The variables constitute a static set of identifiers associated with values in each system state.
TLA⁺ also has actions, which are expressions containing the prime operator.
The prime operator is used to specify the value of variables in the //next// state.
For example:
<code haskell>
VARIABLE x
Action ==
  /\ x = 0
  /\ x' = x + 1
</code>
This spec declares a single variable, ''x'', and a single action.
The action is only enabled for states where ''x'' has value ''0'', and generates a new state where ''x'' has value ''x + 1'', or ''1''.

It's worth taking a moment here to think about what actions actually mean.
Actions are **predicates**, meaning logical expressions evaluating to true or false.
Strictly speaking actions don't "generate" new states, or "assign" values to variables; actions are true or false of a pair of states, called the current & next states.
This is the actual semantic meaning of a TLA⁺ action: a predicate which is satisfied (or not) by a pair of arbitrary states pulled from the mathematical ether.
However, here at the implementation level we don't have the luxury of being able to identify next states by checking an infinite number of arbitrary states pulled from the mathematical ether.
We have to be smart, and pull clues about next state values directly from the action itself.
What this means is that we only support certain types of expressions incorporating primed variables, so we restrict ourselves to only model-checking TLA⁺ specs written in a particular idiom.

Let's start by supporting a simple operation on primed variables, expressions of the form ''x' = expr''.
There is a fair bit of groundwork necessary to reach that point.

===== Declaring State Variables =====

First off we have to add support for variable declarations; these are top-level syntactic constructs that look like ''VARIABLES x, y, z''.
Create a new statement type for them in the ''GenerateAst'' class:
<code java [highlight_lines_extra="2"]>
    defineAst(outputDir, "Stmt", Arrays.asList(
      "VarDecl  : List<Token> names",
      "Print    : Token location, Expr expression",
      "OpDef    : Token name, List<Token> params, Expr body"
    ));
</code>
Then use the old ''do''/''while'' trick to parse comma-separated variable names in the ''declaration()'' method of the ''Parser'' class:
<code java [highlight_lines_extra="4,5,6,7,8,9,10"]>
  private Stmt declaration() {
    try {
      if (lookahead().isAtOpDefStart()) return operatorDefinition();
      if (match(VARIABLES)) {
        List<Token> names = new ArrayList<>();
        do {
          names.add(consume(IDENTIFIER, "Require variable name."));
        } while (match(COMMA));
        return new Stmt.VarDecl(names);
      }

      return statement();
</code>

Before we can define a ''Stmt.VarDecl'' visitor, we need to come up with a way to manage variables & states.
It's simplest to copy the ''Environment'' approach and record the current state as a field in the ''Interpreter'' class:
<code java [highlight_lines_extra="6"]>
class Interpreter implements Expr.Visitor<Object>,
                             Stmt.Visitor<Void> {
  final Environment globals;
  private Environment environment;
  private final PrintStream out;
  private State state = new State();
</code>

This requires a new class!
Create a file called ''State.java''; for now, this just supports the ability to declare variables; it also produces an error if the user attempts to declare the same variable twice:
<code java>
package tla;

import java.util.HashMap;
import java.util.Map;

class State {
  private Map<String, Token> variables = new HashMap<>();

  boolean isDeclared(Token name) {
    return variables.containsKey(name.lexeme);
  }

  void declareVariable(Token name) {
    if (isDeclared(name)) {
      throw new RuntimeError(name, "Redeclared state variable.");
    }

    variables.put(name.lexeme, name);
  }
}
</code>

That's enough to implement ''visitVarDeclStmt()'' in the ''Interpreter'' class:
<code java>
  @Override
  public Void visitVarDeclStmt(Stmt.VarDecl stmt) {
    checkNotDefined(stmt.names);
    for (Token name : stmt.names) {
      state.declareVariable(name);
    }

    return null;
  }
</code>

In intepreter mode we continue to support redefining operators, but will produce an error if the user attempts to redefine an operator as a state variable or vice versa.
Add this check to the ''visitOpDefStmt()'' method of the ''Interpreter'' class:
<code java [highlight_lines_extra="2,3,4"]>
  public Void visitOpDefStmt(Stmt.OpDef stmt) {
    if (state.isDeclared(stmt.name)) {
      throw new RuntimeError(stmt.name, "State variable redeclared as operator.");
    }

    TlaOperator op = new TlaOperator(stmt);
    environment.define(stmt.name, op);
</code>

Also augment the ''checkNotDefined()'' helper method, so state variables cannot be shadowed by operator parameters:
<code java [highlight_lines_extra="7,8,9"]>
  private void checkNotDefined(List<Token> names) {
    for (Token name : names) {
      if (environment.isDefined(name)) {
        throw new RuntimeError(name, "Identifier already in use.");
      }

      if (state.isDeclared(name)) {
        throw new RuntimeError(name, "Name conflicts with state variable.");
      }
    }
</code>

===== Initializing State Variables =====

Now that we can declare variables, what value are they initialized to?
We've successfully dodged this issue for a very long time in this tutorial series, but unfortunately the initial value of these variables is undefined.
That means we will need a null value type.
We've avoided null types thus far, which means we haven't had to do as many checks before using values in the interpreter - a real luxury!
Alas we now depart this wonderful land.
Create a new class, ''UnboundVariable.java'':
<code java>
package tla;

record UnboundVariable(Token name, boolean primed) {
  @Override
  public String toString() {
    return name.lexeme + (primed ? "'" : "");
  }
}
</code>

In the ''State'' class, we need to track variable values for the current & next states; add one ''Map<>'' instance for each:
<code java [highlight_lines_extra="3,4"]>
class State {
  private Map<String, Token> variables = new HashMap<>();
  private Map<String, Object> current = new HashMap<>();
  private Map<String, Object> next = new HashMap<>();
</code>

Then, in ''declareVariable()'', initialize the variables to instances of ''UnboundVariable'':
<code java [highlight_lines_extra="2,3,4"]>
    variables.put(name.lexeme, name);
    current.put(name.lexeme, new UnboundVariable(name, false));
    next.put(name.lexeme, new UnboundVariable(name, true));
  }
</code>

===== Getting State Variables =====

To retrieve variable values, modify the ever-more-complicated ''visitVariableExpr()'' method of the ''Interpreter'' class to call a new ''getValue()'' helper; if the value resolves to an ''UnboundVariable'' instance, return it immediately:
<code java [highlight_lines_extra="2,4,5,6"]>
  public Object visitVariableExpr(Expr.Variable expr) {
    Object referent = getValue(expr.name);

    if (referent instanceof UnboundVariable) {
      return referent;
    }

    if (!(referent instanceof TlaCallable)) {
</code>

The new ''getValue()'' helper merges lookup logic for state variables & operators; these should be disjoint, although state variable values are checked first:
<code java>
  private Object getValue(Token name) {
    if (state.isDeclared(name)) {
      return state.getValue(name);
    }

    return environment.get(name);
  }
</code>

To define ''getValue()'' in the ''State'' class we need to determine whether to pull state variable values from ''current'' or ''next''.
For this there must be some way of tracking whether we are currently inside a primed expression.
Not just variables can be primed in TLA⁺, entire expressions can be!
The meaning of a primed expression is that every state variable within that expression is primed.
This is tracked with a boolean class variable in ''State'', which is initialized to true (for reasons which later be made clear):
<code java [highlight_lines_extra="2"]>
class State {
  private boolean primed = true;
  private Map<String, Token> variables = new HashMap<>();
</code>

Now define ''getValue()'' in the ''State'' class.
If ''primed'' is true, we retrieve the state variable value from ''next''; if false, we retrieve it from ''current'':
<code java>
  Object getValue(Token name) {
    return (primed ? next : current).get(name.lexeme);
  }
</code>

===== Setting State Variables =====

We can retrieve state variable values, but what about assigning them?
To start, let's handle the simple case of expressions of the form ''x = expr'' or ''x' = expr''.
This requires modifying the ''EQUAL'' case of ''visitBinaryExpr()'' in the ''Interpreter'' class.
If the ''left'' operand is an ''UnboundVariable'' instance, then bind the ''left'' state variable to the value of ''right'':
<code java [highlight_lines_extra="2,3,4,5,6"]>
      case EQUAL:
        if (left instanceof UnboundVariable) {
          UnboundVariable var = (UnboundVariable)left;
          state.bindValue(var, right);
          return true;
        }
        return left.equals(right);
</code>

Define ''bindValue()'' in the ''State'' class, which binds the variable's value in ''next'' if the ''UnboundVariable'' instance is primed and ''current'' if it is not:
<code java>
  void bindValue(UnboundVariable var, Object value) {
    (var.primed() ? next : current).put(var.name().lexeme, value);
  }
</code>

===== The Prime Operator =====

We now have everything necessary to define the prime operator.
Here's how it should work: in ''visitUnaryExpr()'' in the ''Interpreter'' class, detect that we are evaluating the prime operator; if so, prime the current state, evaluate the operand as a primed expression, then unprime the state and return the value of the operand.
<code java>
  public Object visitUnaryExpr(Expr.Unary expr) {
    if (TokenType.PRIME == expr.operator.type) {
      state.prime(expr.operator);
      try {
        return evaluate(expr.expr);
      } finally {
        state.unprime();
      }
    }
</code>
Note that we wrap the evaluation in a ''try''/''finally'' similar to in ''executeBlock()'', to restore the interpreter to an ordinary state if the evaluation results in an exception.

We need to put the code at the top of ''visitUnaryExpr()'' because the other unary operators evaluate the operand first, but the prime operator changes how the operand is evaluated - it calls ''state.prime()'' beforehand!
Let's define the ''prime()'' and ''unprime()'' methods in the ''State'' class:
<code java>
  void prime(Token op) {
    primed = true;
  }

  void unprime() {
    primed = false;
  }
</code>

===== Error Checking =====

Our code is nice & simple, but unfortunately it has more holes than Swiss cheese.
Let's muddy it up with a bunch of error checks.

Null value types like ''UnboundVariable'' produce a major annoyance: we now need to sprinkle null checks throughout our evaluation code!
Thankfully many null checks are already handled by our existing stable of ''check-Operand()'' helpers, but some cases still remain.
Near the bottom of the ''Interpreter'' class, create a new helper method ''checkIsDefined()'':
<code java>
  private void checkIsDefined(Object... operands) {
    for (Object operand : operands) {
      if (operand instanceof UnboundVariable) {
        UnboundVariable var = (UnboundVariable)operand;
        throw new RuntimeError(var.name(), "Use of unbound variable.");
      }
    }
  }
</code>

In our ''EQUALS'' handling logic, we can only bind the value of ''right'' to a variable if ''right'' has a defined concrete value.
Also, two values can only be compared for equality if they are both defined:
<code java [highlight_lines_extra="4,8"]>
      case EQUAL:
        if (left instanceof UnboundVariable) {
          UnboundVariable var = (UnboundVariable)left;
          checkIsDefined(right);
          state.bindValue(var, right);
          return true;
        }
        checkIsDefined(left, right);
        return left.equals(right);
</code>

A null check also must be added to the ''LEFT_BRACE'' case of ''visitVariadicExpr()''; we can't let the user construct sets full of undefined values!
<code java [highlight_lines_extra="5"]>
      case LEFT_BRACE:
        Set<Object> set = new HashSet<Object>();
        for (Expr parameter : expr.parameters) {
          Object value = evaluate(parameter);
          checkIsDefined(value);
          set.add(value);
        }
</code>

===== The Initial State =====

We can declare, set, and get state variables, but how does this all come together into a sequence of states?
It starts with the initial state.
Not all components of a TLA⁺ spec are actions; the initial state predicate only operates on unprimed variables.
While we //could// add another field to ''State'' recording whether we are in the initial state, this is unnecessary.
Remember when we initialized ''prime'' to true?
This implicitly puts us in the initial state; variables will have their values bound in ''next'', and if the user tries to prime a variable in the initial state we raise an error:
<code java [highlight_lines_extra="2,3,4,5"]>
  void prime(Token op) {
    if (primed) {
      throw new RuntimeError(op,
          "Cannot double-prime expression or prime initial state.");
    }

    primed = true;
  }
</code>
Once we transition to a non-initial state ''isPrimed'' becomes false outside of primed expressions.
This check also catches the case where users double-prime an expression, which is illegal in TLA⁺.

Now we define the all-important ''step()'' method of the ''State'' class, which transitions it to the next state:
<code java>
  void step() {
    primed = false;
    current = next;
    next = new HashMap<>();
    for (Map.Entry<String, Token> var : variables.entrySet()) {
      next.put(var.getKey(), new UnboundVariable(var.getValue(), true));
    }
  }
</code>

Now we can define the initial state using a non-primed predicate, step, define the next state using primed variables, then step again //ad infinitum//.
All we have to do is wire everything up; first, though, we need to think about nondeterminism.

===== Nondeterminism =====

In TLA⁺, states generally do not have only one successor state.
Instead, there are usually multiple possible states to transition to.
This is called nondeterminism, and is a key TLA⁺ feature enabling modeling of concurrent scheduling & much more.
Nondeterminism is expressed in TLA⁺ through the use of disjunction; for example:
<code haskell>
Action ==
  \/ x' = 1
  \/ x' = 2
</code>
The ''Action'' predicate matches next states where ''x'' is //either// 1 or 2.
This means ''Action'' represents a nondeterministic step where the system can arbitrarily move to a state where ''x'' is 1, or a state where ''x'' is 2.

Currently, we store the state in a single object in the ''Interpreter'' class.
How can we represent & compute with multiple possible next states?
The answer is to add another field to the ''Interpreter'' class, holding the set of identified possible next states:
<code java [highlight_lines_extra="3"]>
  private final PrintStream out;
  private State state = new State();
  private final Set<State> possibleNext = new HashSet<>();

  public Interpreter(PrintStream out, boolean replMode) {
</code>

When our interpreter finds multiple possible next states, it tosses one of them into ''possibleNext'' for later consideration and continues evaluating & binding the variables in the current state.
Then some top-level loop churns through the ''possibleNext'' set, either ruling out or accepting each possible next state until none remain.
We will write this top-level loop now; create a new method ''getNextStates()'' in the ''Interpreter'' class:
<code java>
  List<State> getNextStates(Stmt.OpDef action, State current) {
    Set<State> confirmedNext = new HashSet<>();
    try {
      possibleNext.add(current);
      while (!possibleNext.isEmpty()) {
        state = possibleNext.iterator().next();
        Object satisfied = evaluate(action.body);
        checkBooleanOperand(action.name, satisfied);
        if ((boolean)satisfied && state.isComplete()) confirmedNext.add(state);
        possibleNext.remove(state);
      }
    } finally {
      possibleNext.clear();
      state.clearNext();
    }

    return new ArrayList<>(confirmedNext);
  }
</code>

This requires two additional methods in the ''State'' class: ''isComplete()'', and ''clearNext()''.
A state is complete when it has at least one declared variable and all declared variables have been bound to concrete values in the next state:
<code java>
  boolean isComplete() {
    return !variables.isEmpty() && next.values().stream()
        .noneMatch(v -> v instanceof UnboundVariable);
  }
</code>

The ''clearNext()'' method wipes out the values in ''next'', to avoid leaving the ''state'' field in an incomplete state:
<code java>
  void clearNext() {
    for (Map.Entry<String, Token> var : variables.entrySet()) {
      next.put(var.getKey(), new UnboundVariable(var.getValue(), true));
    }
  }
</code>

It's worth spending some time considering the ''getNextStates()'' method.
From a pure functional perspective the approach is quite displeasing; our interpreter isn't just evaluating expressions anymore, it's also spewing out a bunch of half-baked states on the side.
This side-effectful method makes it quite a bit harder to reason about the current state of our interpreter, but within the limitations of the Java language the method is appropriate.
It is also consistent with what we are already doing with the ''environment'' and ''state'' fields.

There is also the question of termination.
What is preventing ''getNextStates()'' from entering an infinite loop?
The answer (as we'll see) is that we only add a state to ''possibleNext'' if either it is //already// in ''possibleNext'' (in which case it is de-duplicated) or after binding the value of at least one more variable than is bound in the current state.
Thus the number of variables bound to concrete values in ''possibleNext'' increases monotonically, eventually encompassing all declared variables and terminating the loop.

Let's get concrete.
How do we add states to ''possibleNext'' while evaluating disjunction?
For each disjunct, we give ''state'' a copy of the current state, then evaluate the disjunct and add the resulting value of ''state'' to ''possibleNext''.
As described above, this state will either be the same as the current state (so be de-duplicated) or have bound the value of at least one more state variable.
We need to evaluate every disjunct to ensure we find all possible next states, which is why TLA⁺ disjunction does not short-circuit.
Modify the ''OR'' handling code in ''visitVariadicExpr()'' as highlighted:
<code java [highlight_lines_extra="3,5,8"]>
      case OR:
        boolean result = false;
        State current = state;
        for (Expr disjunct : expr.parameters) {
          state = new State(current);
          Object junctResult = evaluate(disjunct);
          checkBooleanOperand(expr.operator, junctResult);
          possibleNext.add(state);
          result |= (boolean)junctResult;
        }
        return result;
      default:
</code>

There's one other operator we will support for binding state variables: the set membership ''\in'' operator.
Actions like ''x' \in {0, 1}'' are equivalent to ''x' = 0 \/ x' = 1''.
Add the following code to the ''IN'' case in ''visitBinaryExpr()'':
<code java [highlight_lines_extra="3,4,5,6,7,8,9,10,11,12,13"]>
      case IN:
        checkSetOperand(expr.operator, right);
        if (left instanceof UnboundVariable) {
          UnboundVariable var = (UnboundVariable)left;
          State current = state;
          for (Object element : (Set<?>)right) {
            state = new State(current);
            state.bindValue(var, element);
            left = element;
            possibleNext.add(state);
          }
        }
        checkIsDefined(left);
        return ((Set<?>)right).contains(left);
</code>

We can now generate possible next states by calling ''getNextStates()'' with an appropriate action!

